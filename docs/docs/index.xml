<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on WAT Notes</title>
    <link>https://WAT36.github.io/pages/docs/</link>
    <description>Recent content in Docs on WAT Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 07 Mar 2021 00:21:02 +0900</lastBuildDate><atom:link href="https://WAT36.github.io/pages/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(Python)タプル</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/tuple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/tuple/</guid>
      <description>(Python)タプル # Pythonで使うタプルについてを述べる。 Python タプルとはPythonで使われるデータ構造で、リストと同様に複数のデータ</description>
    </item>
    
    <item>
      <title>(Python)引数のデフォルト値</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/default_arg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/default_arg/</guid>
      <description>(Python)引数のデフォルト値 # 関数の引数にデフォルト値を設定できる言語がある。 定義した引数に何も値が入力されなかった場合に、自動でデフ</description>
    </item>
    
    <item>
      <title>(折れ線)グラフを描画する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/plot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/plot/</guid>
      <description>(折れ線)グラフを描画する # Python グラフを描くためにはmatplotlibのpyplotライブラリを利用する。 ここでは2次元の折れ線グラフを作成</description>
    </item>
    
    <item>
      <title>16進数に変換して表示</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/hex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/hex/</guid>
      <description>16進数に変換して表示 # 数値を16進数に変換して表示する方法についてを示す。 Java JavaではラッパークラスIntegerに数値を16進数に変換</description>
    </item>
    
    <item>
      <title>2,8,16進数を10進数に変換して表示</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/dec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/dec/</guid>
      <description>2,8,16進数を10進数に変換して表示 # 2,8,16進数を10進数に変換する方法についてを示す。 Java Javaでは文字列を数値に変換する の所で</description>
    </item>
    
    <item>
      <title>2変数関数のグラフ(ヒートマップ)を作成する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/pcolor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/pcolor/</guid>
      <description>2変数関数のグラフ(ヒートマップ)を作成する # Python 2変数関数のグラフとして、、ヒートマップで表示するにはpyplotの関数pcolorを利用す</description>
    </item>
    
    <item>
      <title>2変数関数のグラフ(等高線プロット)を作成する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/contour/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/contour/</guid>
      <description>2変数関数のグラフ(等高線プロット)を作成する # Python 2変数関数のグラフとして、等高線プロットで表示するにはpyplotの関数contourを利</description>
    </item>
    
    <item>
      <title>2変数関数のグラフ(３D面グラフ)を作成する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/surface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/surface/</guid>
      <description>2変数関数のグラフ(３D面グラフ)を作成する # Python 2変数関数のグラフとして、3D面グラフで表示するにはmpl_toolkits.mplot3d</description>
    </item>
    
    <item>
      <title>2変数関数を定義する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/2varfunc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/2varfunc/</guid>
      <description>2変数関数を定義する # Python 2変数関数の定義は関数定義の時に引数を２つ設定すれば良い。 試しに、f(x,y) = √(x2 + y2)を定義する例を示す。</description>
    </item>
    
    <item>
      <title>2次元入力の面モデル</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/2dmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/2dmodel/</guid>
      <description>2次元入力の面モデル # 先程の勾配法の例では入力データは1次元であったが、2次元であった場合はどうだろうか。 例として、以下のようなデータを用意</description>
    </item>
    
    <item>
      <title>8進数に変換して表示</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/oct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/oct/</guid>
      <description>8進数に変換して表示 # 数値を8進数に変換して表示する方法についてを示す。 Java JavaではラッパークラスIntegerに数値を8進数に変換するメ</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://WAT36.github.io/pages/docs/about/aboutme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/about/aboutme/</guid>
      <description>About Me # 自己紹介 HN # WAT 昔から使っているHNのWATで通しています。Github等一部のSNSではTatsuroh Wakasugiの名を使ってい</description>
    </item>
    
    <item>
      <title>API</title>
      <link>https://WAT36.github.io/pages/docs/front-end/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/api/</guid>
      <description>API HTMLに関連する各種APIについて。 マルチメディアグラフィックスAPI # HTMLでの音声・動画といったマルチメディアに関する設定や操作を</description>
    </item>
    
    <item>
      <title>Binary Indexed Tree</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/binary_indexed_tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/binary_indexed_tree/</guid>
      <description>Binary Indexed Tree # Binary Indexed Tree(BIT)は、セグメント木を応用したデータ構造で、リスト(数列)anが与えられた時、次のことが行える。 iが与えられた時、</description>
    </item>
    
    <item>
      <title>break文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/break/</guid>
      <description>break文 # ループを抜け出す際に用いるbreak文についてを示す。 Java ループ処理のfor文、while文において、処理の途中にbreakがあ</description>
    </item>
    
    <item>
      <title>Comment</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/comment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/comment/</guid>
      <description>コメントアウト # プログラミングでコメント（注釈）を付け加えたい時、或いはある箇所だけを実行(・コンパイル)の対象外としたい時にはコメントアウ</description>
    </item>
    
    <item>
      <title>continue文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/continue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/continue/</guid>
      <description>continue文 # continue文はfor文、while文のループ処理において、そのループ1回分の処理をそこで終了し、 条件式の判定（fo</description>
    </item>
    
    <item>
      <title>CSSでのテキスト</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_text/</guid>
      <description>CSSでのテキスト # CSSでのテキストの表現方法についてを示す。 text-shadowプロパティ # text-shadowプロパティは、テキス</description>
    </item>
    
    <item>
      <title>CSSでのフォント</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_font/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_font/</guid>
      <description>CSSでのフォント # CSSでのフォントについて示す。 Webフォント # CSSでフォントを指定しても、ユーザーの環境にそのフォントがインストール</description>
    </item>
    
    <item>
      <title>CSSでのボックス</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_box/</guid>
      <description>CSSのボックス # CSSで扱うボックスについて。 前述した通り、HTMLでは要素内容の表示にはボックスと呼ばれる単位で表示される。 ボックスの詳</description>
    </item>
    
    <item>
      <title>CSSでの背景</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_background/</guid>
      <description>CSSでの背景 # CSSでの背景の設定方法についてを述べる。 background-colorプロパティ # background-colorプロパ</description>
    </item>
    
    <item>
      <title>CSSでの色</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_color/</guid>
      <description>CSSでの色の表現 # CSSでの色の表現について述べる。 16進数の値 # 方法の一つとして、#(シャープ)と16進数6桁の値で色を表現する方法があ</description>
    </item>
    
    <item>
      <title>CSSとは</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_about/</guid>
      <description>CSSとは # CSSの基本事項についてを述べる。 CSSは、HTMLに組み込む形で使用する言語で、HTMLで作成した文書に対しCSSでどの部分を</description>
    </item>
    
    <item>
      <title>CSS適用の優先順位</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_priority/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_priority/</guid>
      <description>CSS適用の優先順位 # 指定元による優先順位 # CSSはWebページの製作者だけが指定できるものではなく、閲覧しているユーザも独自に指定でき、ま</description>
    </item>
    
    <item>
      <title>Dockerイメージとコンテナ</title>
      <link>https://WAT36.github.io/pages/docs/container/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/container/docker/</guid>
      <description>Dockerイメージとコンテナ # ウォーターフォール型によるアプリケーション開発の場合、開発に使う環境は開発用の環境、検証(テスト)用の環境、</description>
    </item>
    
    <item>
      <title>DOM</title>
      <link>https://WAT36.github.io/pages/docs/front-end/dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/dom/</guid>
      <description>DOM # DOMとはDocument Object Modelの略で、HTML(またはXML)の各要素にアクセスするための仕組みである。Javascriptでは</description>
    </item>
    
    <item>
      <title>for文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/for/</guid>
      <description>for文 # 繰り返し処理を行う制御構文の一つ、for文について各言語での利用法を示す。 Java Javaでの記法は以下の通り。 for(初期化式;条件式</description>
    </item>
    
    <item>
      <title>HTMLの全体構造</title>
      <link>https://WAT36.github.io/pages/docs/front-end/html_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/html_structure/</guid>
      <description>HTMLの全体構造 # HTMLファイルの構造についてを述べる。 HTMLファイルは主に以下から構成される。 DOCTYPE宣言（文書型宣言） htm</description>
    </item>
    
    <item>
      <title>HTTP・HTTPS</title>
      <link>https://WAT36.github.io/pages/docs/front-end/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/http/</guid>
      <description>HTTP・HTTPS HTTP、HTTPSプロトコルについてを述べる。 HTTPプロトコル # HTTP(Hyper Text Transfer Protocol)とは、Webサーバとクライア</description>
    </item>
    
    <item>
      <title>if-else文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/ifelse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/ifelse/</guid>
      <description>if-else文 # 指定した条件に応じて処理を分岐させる時に使うのがif-else文である。 これはほぼ全てのプログラミング言語に実装されている</description>
    </item>
    
    <item>
      <title>K-Means法</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/k-means/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/k-means/</guid>
      <description>K-Means法 # クラスタリングの手法の一つ、K-means法についてを述べる。 先ほども示した以下のデータを例にとって、大まかな手順を、以下</description>
    </item>
    
    <item>
      <title>Kerasでニューラルネットワーク</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/keras/</guid>
      <description>Kerasでニューラルネットワーク # 前章ではニューラルネットワークを一から実装してきたが、今ではニューラルネットワークに関連するライブラリが</description>
    </item>
    
    <item>
      <title>NaN</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/nan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/nan/</guid>
      <description>NaN #  </description>
    </item>
    
    <item>
      <title>Null</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/null/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/null/</guid>
      <description>Null # プログラミングでよく見るNullについて。 Nullとは何なのか？ Nullとは何もない、何も入ってない、という状態を示す語である。 変数に何</description>
    </item>
    
    <item>
      <title>N次元線形回帰モデル</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/N-dimension_linear_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/N-dimension_linear_model/</guid>
      <description>N次元線形回帰モデル # 先程までの章では1次元(直線モデル)、2次元(面モデル)の入力データを扱ってきたが、そこから更に次元を広げたN次元の入</description>
    </item>
    
    <item>
      <title>Other Index</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/other_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/other_index/</guid>
      <description>その他 # その他、括れてない手法などをまとめる。 変数 変数を設定する 変数の型を調べる 定数 関数、メソッドのヘルプを見る(Python) コメントアウ</description>
    </item>
    
    <item>
      <title>Pass</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/pass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/pass/</guid>
      <description>pass文 # 何も処理をしない文、pass文についてを示す。 構文としては何か記述が必要だが、特に処理をする必要がないという時に使う。 言語により</description>
    </item>
    
    <item>
      <title>Set型</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/set/</guid>
      <description>Set型 # Set型変数とはリストと似たデータ構造で、リストから要素の重複を除いたものを順不同で集めたデータ構造である。しかし、インデックスを</description>
    </item>
    
    <item>
      <title>Strictモード(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/js_strict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/js_strict/</guid>
      <description>Strictモード(Javascript) # JavascriptのStrictモードについて。 Javascriptの仕様には様々な理由で曖昧</description>
    </item>
    
    <item>
      <title>switch文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/switch/</guid>
      <description>switch文 # switch文は一つの式の結果から多くの処理に分岐させたいときに用いる。 ここではそのswitch文についてを示す。 Java Java</description>
    </item>
    
    <item>
      <title>Type</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/type/</guid>
      <description>変数の型を調べる # 変数の型を調べる方法についてを示す。 Java javaにはinstanceofという演算子がある。 変数 instanceof クラス名 変数に入っているデ</description>
    </item>
    
    <item>
      <title>Union-Find木</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/union-find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/union-find/</guid>
      <description>Union-Find木 # Union-Find木について。 Union-Find木は要素のグループ分けを管理するデータ構造である。 1つ以上の要素</description>
    </item>
    
    <item>
      <title>while文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/while/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/while/</guid>
      <description>while文 # 繰り返し処理を行う制御構文の一つ、while文について各言語での利用法を示す。 また、言語にもよるがdo-while文についても</description>
    </item>
    
    <item>
      <title>x,y軸の表示範囲を指定する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/lim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/lim/</guid>
      <description>x,y軸の表示範囲を指定する # Python グラフの軸の表示範囲は入力した座標の最大値、最小値に基づいて決定されるが、 こちらでx,y軸の表示範囲を指定し</description>
    </item>
    
    <item>
      <title>その他</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_other/</guid>
      <description>その他(CSS) # CSSについてその他、括れてない手法についてを述べる。 グラデーション # CSSで、画像が指定可能なところにおいては、画像の場</description>
    </item>
    
    <item>
      <title>その他のWeb関連技術</title>
      <link>https://WAT36.github.io/pages/docs/front-end/web_other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/web_other/</guid>
      <description>その他のWeb関連技術 ここまでで述べられてないWeb関連技術についてを述べる。 なお、ここでは具体例はあまり載せられていません。悪しからず。 文</description>
    </item>
    
    <item>
      <title>その他の要素</title>
      <link>https://WAT36.github.io/pages/docs/front-end/html_other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/html_other/</guid>
      <description>その他の要素 # その他の要素についてを述べる。 figure要素 # figure要素は、それが文書から参照される、自己完結型のコンテンツ(フローコ</description>
    </item>
    
    <item>
      <title>アニメーション</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_animation/</guid>
      <description>CSSのアニメーション # CSSで行えるアニメーションについてを述べる。 回転・拡大縮小・移動 # ボックスを回転・拡大縮小・移動などさせるプロパテ</description>
    </item>
    
    <item>
      <title>イベント</title>
      <link>https://WAT36.github.io/pages/docs/front-end/event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/event/</guid>
      <description>イベント # Javascriptのイベントについてを記す。 イベントとは、ユーザーの画面上での何らかの操作を、プログラム上で検知し、利用できるよ</description>
    </item>
    
    <item>
      <title>ウィンドウ</title>
      <link>https://WAT36.github.io/pages/docs/front-end/window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/window/</guid>
      <description>ウィンドウ # ウィンドウオブジェクトとは、ブラウザ上の各ウィンドウを示すオブジェクトである。このオブジェクトには様々なプロパティ、メソッドなど</description>
    </item>
    
    <item>
      <title>オブジェクト(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/object/</guid>
      <description>オブジェクト(Javascript) # Javascriptのオブジェクトについて。 Javascriptでは、オブジェクトと呼ばれる、C言語な</description>
    </item>
    
    <item>
      <title>オーバーフィッティング(過学習)</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/overfitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/overfitting/</guid>
      <description>オーバーフィッティング(過学習) # 先述の線形基底関数モデルにおいて、Mの値を大きくすればするほど、誤差が小さくなるような予測式が得られる事が</description>
    </item>
    
    <item>
      <title>ガウス関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/gauss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/gauss/</guid>
      <description>ガウス関数 # Python ガウス関数は以下の式で表される関数である。 a exp ( - (x - &amp;mu; ) 2 &amp;sigma; 2 ) ここで、式中の変数は以下の意味を持つ。 μ：中心(平均) σ：標</description>
    </item>
    
    <item>
      <title>ガウス関数(2次元)</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/gauss_2D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/gauss_2D/</guid>
      <description>ガウス関数(2次元) # Python ガウス関数 a exp ( - (x - &amp;mu; ) 2 &amp;sigma; 2 ) において、入力xを2次元ベクトルとした時の場合を考える。(以下) x = x 0 x 1 この時</description>
    </item>
    
    <item>
      <title>クラウド(AWS)</title>
      <link>https://WAT36.github.io/pages/docs/cloud/aws/aws_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/cloud/aws/aws_index/</guid>
      <description>クラウド(AWS) # AWSについてのまとめ。 ハンズオン DynamoDBテーブルの作成方法 Lambda関数の作成方法 API GatewayでのAPI</description>
    </item>
    
    <item>
      <title>クラスの定義</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/class/</guid>
      <description>クラスの定義 # クラスを定義する方法についてを示す。 Java Javaでのクラス定義方法は以下の通り。 [public] class クラス名 [extends 継承元クラス名] [implements 実装先インタフェ</description>
    </item>
    
    <item>
      <title>クラスタリング</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/clustering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/clustering/</guid>
      <description>クラスタリング # 教師あり学習の分類では、入力データに対し分類後のクラス(カテゴリ)が与えられていたが、ここでは入力データからデータをクラスに</description>
    </item>
    
    <item>
      <title>クラス・関数(メソッド)</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/classfunc_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/classfunc_index/</guid>
      <description>クラス・関数(メソッド) # クラス及び関数（メソッド）の定義についてを示す。 これも言語によって違う名前で呼ばれているものもあるので注意。 C言語</description>
    </item>
    
    <item>
      <title>グラフにグリッド線を表示させる</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/grid/</guid>
      <description>グラフにグリッド線を表示させる # Python グラフにグリッド線(方眼)を表示するにはpyplotの関数**grid()**を利用する。引数にはTrue</description>
    </item>
    
    <item>
      <title>グラフに色をつける</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/color/</guid>
      <description>グラフに色をつける # Python グラフに色をつけて表示させるには、グラフを表示するときに使ったpyplotの関数plotの引数にcolorというパラメ</description>
    </item>
    
    <item>
      <title>グラフのタイトルを設定する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/title/</guid>
      <description>グラフのタイトルを設定する # Python グラフのタイトルを設定、表示するにはpyplotの関数**title()**を利用する。 例として、前述のグラフ</description>
    </item>
    
    <item>
      <title>グラフの凡例を表示する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/legend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/legend/</guid>
      <description>グラフの凡例を表示する # Python グラフに凡例を表示させるには、まずグラフを表示するときに使ったpyplotの関数plotの引数にlabelというパ</description>
    </item>
    
    <item>
      <title>グラフの表現方法</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/graph/</guid>
      <description>グラフの表現方法 # グラフはコード上でどのように表現して作ればよいのか？ ここではいくつか方法を示す。 隣接行列 # まずは隣接行列という方法について</description>
    </item>
    
    <item>
      <title>グラフを複数表示させる</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/subplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/subplot/</guid>
      <description>グラフを複数表示させる # Python グラフを複数表示するにはpyplotの関数subplotを使う。 subplot(nrows, ncols, index) subplotを使うと縦nrows×横nco</description>
    </item>
    
    <item>
      <title>グラフィックス</title>
      <link>https://WAT36.github.io/pages/docs/front-end/graphics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/graphics/</guid>
      <description>グラフィックス・アニメーション # グラフィックス及びアニメーションについてを述べる。 Canvas(2D) # Canvasを利用すると、Javascriptでブラウ</description>
    </item>
    
    <item>
      <title>グラフ・データ処理</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/graph_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/graph_index/</guid>
      <description>グラフ・データ処理 # データサイエンスでは必須？ グラフ描画やcsv等のデータ前処理についてをまとめる。 ここも都合上、現在はPythonのみ記載</description>
    </item>
    
    <item>
      <title>グローバル属性</title>
      <link>https://WAT36.github.io/pages/docs/front-end/global_attr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/global_attr/</guid>
      <description>グローバル属性 # グローバル属性とは全ての要素で指定できる属性のことを言う。 主に以下のものが挙げられる。 class属性 # class属性は、要素</description>
    </item>
    
    <item>
      <title>コンストラクタ(  init  )</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/constructor/</guid>
      <description>コンストラクタ(__init__) # クラスのコンストラクタについてを書く。 コンストラクタとはクラスのインスタンスを作成した時に、そのインスタ</description>
    </item>
    
    <item>
      <title>コンテナ</title>
      <link>https://WAT36.github.io/pages/docs/container/container_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/container/container_index/</guid>
      <description>コンテナ系 メモ # コンテナについて何か勉強したいなって、とりあえず立てた まずはDockerについて書いて見ます コンテナとは？ Dockerイメー</description>
    </item>
    
    <item>
      <title>コンテナとは？</title>
      <link>https://WAT36.github.io/pages/docs/container/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/container/container/</guid>
      <description>コンテナとは？ # 最近よく聞くコンテナ技術とは何なのか？ コンテナとは、OS上に論理的な区画(コンテナ)を作り、そこにミドルウェア、アプリケーシ</description>
    </item>
    
    <item>
      <title>シグモイド関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/sigmoid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/sigmoid/</guid>
      <description>シグモイド関数 # 機械学習でよく用いられるシグモイド関数についてを述べる。 シグモイド関数とは以下の式で定義される関数である。 Python シグモイド関数を</description>
    </item>
    
    <item>
      <title>シグモイド関数とソフトマックス関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/softmax_sigmoid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/softmax_sigmoid/</guid>
      <description>シグモイド関数とソフトマックス関数 # シグモイド関数とソフトマックス関数は類似しているところがある。 2変数(x0、x1)の時のソフトマックス関</description>
    </item>
    
    <item>
      <title>シーザー暗号</title>
      <link>https://WAT36.github.io/pages/docs/ctf/caesar_cipher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/ctf/caesar_cipher/</guid>
      <description>シーザー暗号 # 暗号の一つであるシーザー暗号についてを述べる。 シーザー暗号は元の文(平文)の各文字を、辞書順にx字ずらしてできる暗号のことであ</description>
    </item>
    
    <item>
      <title>ジェネリクス</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/generics/</guid>
      <description>ジェネリクス # ジェネリクスについて。 ジェネリクスとは、特定の型に制限されない、抽象的かつ汎用的なコードを記述するための機能である。 変数の型を</description>
    </item>
    
    <item>
      <title>ジェネレータ関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/generator-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/generator-2/</guid>
      <description>ジェネレータ関数 # ジェネレータ関数とは、呼び出されるたびにこtなる値を返す関数の事である。例としては乱数がある。 ジェネレータ関数が普通の関数</description>
    </item>
    
    <item>
      <title>ジェネレータ関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/generator/</guid>
      <description>ジェネレータ関数 # ジェネレータ関数とは、呼び出されるたびにこtなる値を返す関数の事である。例としては乱数がある。 ジェネレータ関数が普通の関数</description>
    </item>
    
    <item>
      <title>ストレージ(JavaScript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/storage_js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/storage_js/</guid>
      <description>ストレージ(JavaScript) # Javascriptで扱えるストレージについてを示す。 Web Storage # Web Storageは、大容量(数MB)のデータ</description>
    </item>
    
    <item>
      <title>スマートフォン最適化</title>
      <link>https://WAT36.github.io/pages/docs/front-end/smartphone_optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/smartphone_optimization/</guid>
      <description>スマートフォン最適化 # スマートフォン最適化についてを述べる。 CSSスプライト # CSSスプライトとは、複数の画像をつなげて1つのファイルにまと</description>
    </item>
    
    <item>
      <title>セキュリティモデル(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/security_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/security_model/</guid>
      <description>セキュリティモデル(Javascript) # Javascriptのセキュリティモデルに関する事項を述べる。 クロスオリジン制約 # コンテンツを取</description>
    </item>
    
    <item>
      <title>セクション</title>
      <link>https://WAT36.github.io/pages/docs/front-end/section/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/section/</guid>
      <description>セクション # セクションとは章や節といった様なもの、HTMLでは見出しとそれに対応する文書の部分(セクショニングコンテンツ)といった様なもので</description>
    </item>
    
    <item>
      <title>セグメント木</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/segment_tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/segment_tree/</guid>
      <description>セグメント木 # セグメント木は区間と二分木を組み合わせたようなデータ構造である。例えば長さ8のリストをセグメント木で表すと以下のようになる。 こ</description>
    </item>
    
    <item>
      <title>セレクタ</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_selector/</guid>
      <description>セレクタ # CSSのセレクタについてを述べる。 セレクタにはいくつか種類があり、セレクタの基本的な最小単位のことをシンプルセレクタという。 種類に</description>
    </item>
    
    <item>
      <title>ソフトマックス関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/softmax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/softmax/</guid>
      <description>ソフトマックス関数 # Python 複数の数x1,x2,&amp;hellip;xiがあり、それらの数の大小関係を保ったままそれぞれを確率を表す数y1,y2,&amp;h</description>
    </item>
    
    <item>
      <title>ダイクストラ法</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/dijkstra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/dijkstra/</guid>
      <description>ダイクストラ法 # グラフ探索の手法の一つ、ダイクストラ法についてを述べる。 ダイクストラ法は重み付きのグラフにおいて、ある頂点から他の全ての頂点</description>
    </item>
    
    <item>
      <title>テキスト</title>
      <link>https://WAT36.github.io/pages/docs/front-end/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/text/</guid>
      <description>テキスト # HTML文書にテキストを記載、装飾、補足するための要素についてをここでは述べる。 (一部表示例も記載するが、ブラウザ等により表示が異</description>
    </item>
    
    <item>
      <title>テーブル(表)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/table/</guid>
      <description>テーブル(表) # テーブル(表)を作る要素についてを述べる。 table要素 # table要素は１つのテーブル(表)を表す要素である。 table要</description>
    </item>
    
    <item>
      <title>デバイスアクセス(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/device_access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/device_access/</guid>
      <description>デバイスアクセス(Javascript) # デバイスアクセス、いわゆる機器に関する情報を得るためのAPIをここでは述べる。 Geolocation API # Geolocation APIは、ユ</description>
    </item>
    
    <item>
      <title>ニューラルネットワーク</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/neural_network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/neural_network/</guid>
      <description>ニューラルネットワーク # ニューラルネットワークとは、人間の神経細胞を模した数理モデルであるニューロンモデルを利用した機械学習のアルゴリズムで</description>
    </item>
    
    <item>
      <title>ネットワークフロー</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/network_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/network_flow/</guid>
      <description>ネットワークフロー # グラフにおける最大流・最小流問題についてを述べる。 以下に例題を示す。 ネットワーク上の2台のコンピュータS,Tがあり、Sか</description>
    </item>
    
    <item>
      <title>バケット法と平方分割</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/bucket/</guid>
      <description>バケット法と平方分割 # まずバケット法とは、列、または平面状に散らばったデータをバケットと呼ばれる単位に分割して、バケットにデータを管理させる</description>
    </item>
    
    <item>
      <title>パフォーマンス系API(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/performance_js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/performance_js/</guid>
      <description>パフォーマンス系API(Javascript) # Javascriptのパフォーマンスに関するAPIを述べる。 Web Workers # Web Workersは、Web</description>
    </item>
    
    <item>
      <title>ファイル</title>
      <link>https://WAT36.github.io/pages/docs/programming/file_io/file_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/file_io/file_index/</guid>
      <description>ファイル # ファイルを扱う手法についてをまとめる。 ファイル入出力 ファイル読み込み ファイル書き込み 外部ライブラリの使用 外部ファイルのインポート</description>
    </item>
    
    <item>
      <title>ファイル書き込み</title>
      <link>https://WAT36.github.io/pages/docs/programming/file_io/filewrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/file_io/filewrite/</guid>
      <description>ファイル書き込み # ファイルを書き込む方法についてを示す。 Java 読み込み時と同様に、ここではテキストファイルなど一般的なファイルに対する読み込み方</description>
    </item>
    
    <item>
      <title>ファイル読み込み</title>
      <link>https://WAT36.github.io/pages/docs/programming/file_io/fileopen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/file_io/fileopen/</guid>
      <description>ファイル読み込み # ファイルを読み込む方法についてを示す。 Java Javaではプロパティファイル(.propertiesで終わるファイル)に関しては</description>
    </item>
    
    <item>
      <title>フィルターと畳み込みニューラルネットワーク</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/filter/</guid>
      <description>フィルターと畳み込みニューラルネットワーク # 先述の手書き文字認識の章で、活性化関数を変えるなどして認識精度の向上を図ったが、もっと精度を上げ</description>
    </item>
    
    <item>
      <title>フィールド(クラス変数・インスタンス変数)</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/field/</guid>
      <description>フィールド(クラス変数・インスタンス変数) # フィールド変数とはクラス内に定義する変数のこと。 その中でも主に、クラス内で定義して全てのインスタ</description>
    </item>
    
    <item>
      <title>フォーム</title>
      <link>https://WAT36.github.io/pages/docs/front-end/form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/form/</guid>
      <description>フォーム # フォームを作成するための要素についてを述べる。 form要素 # form要素はフォームを構成する要素である。 使用する主な属性は以下の通</description>
    </item>
    
    <item>
      <title>ブラウザ関連API</title>
      <link>https://WAT36.github.io/pages/docs/front-end/browser_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/browser_api/</guid>
      <description>ブラウザ関連API # ブラウザに関するAPIについて。 なお、ここではサンプルは一部割愛致します（ブラウザ遷移を伴ってしまうため・・・） History API # History</description>
    </item>
    
    <item>
      <title>ベルマンフォード法</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/bellman_ford/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/bellman_ford/</guid>
      <description>ベルマンフォード法 # ベルマンフォード法とは、最短路問題(ある点から他の全ての頂点との間の最短路を求める問題)を解く手法の一つである。 始点sか</description>
    </item>
    
    <item>
      <title>ホールドアウト検証</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/holdout_validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/holdout_validation/</guid>
      <description>ホールドアウト検証 # 先述のオーバーフィッティング(過学習)の章で、Mを大きくすればするほど既存の入力データに対する精度が高くなり、未知の入力</description>
    </item>
    
    <item>
      <title>マルチカラム</title>
      <link>https://WAT36.github.io/pages/docs/front-end/css_multicolumn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/css_multicolumn/</guid>
      <description>マルチカラム # マルチカラムとは、ボックスの内部を複数の段に分割してできるレイアウトである。 ここでは、マルチカラムについてを述べる。 colum</description>
    </item>
    
    <item>
      <title>ラムダ式（無名関数）</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/lambda/</guid>
      <description>ラムダ式（無名関数） # ラムダ式（無名関数）についてを述べる。 Java Javaでは簡易的なメソッドを実装する方法としてラムダ式というのがある。 ( 実装</description>
    </item>
    
    <item>
      <title>リスト</title>
      <link>https://WAT36.github.io/pages/docs/front-end/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/list/</guid>
      <description>リスト # HTML文書にリストを記載するための要素についてをここでは述べる。 ul要素 # ul要素は、箇条書きリストを作成するための要素である。一</description>
    </item>
    
    <item>
      <title>リストa,bに共通して入っている要素のみを表示（積集合）</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_and/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_and/</guid>
      <description>リストa,bに共通して入っている要素のみを表示（積集合） # 2つのリストに共通して入っている要素のみを表示する方法についてを示す。 Java Javaで</description>
    </item>
    
    <item>
      <title>リストaにありリストbに入ってない要素のみを表示（差集合）</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_except/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_except/</guid>
      <description>リストaにありリストbに入ってない要素のみを表示（差集合） # リストaにありリストbに入ってない要素のみを表示する方法についてを示す。 なお、リ</description>
    </item>
    
    <item>
      <title>リストaまたはbに入っている要素を表示（和集合）</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_or/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_or/</guid>
      <description>リストaまたはbに入っている要素を表示（和集合） # 2つのリストの少なくとも一つに入っている要素のみを表示する方法についてを示す。 なお、リスト</description>
    </item>
    
    <item>
      <title>リストから条件に合う要素のみを取得した新しいリストを作成する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/inclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/inclusion/</guid>
      <description>リストから条件に合う要素のみを取得した新しいリストを作成する # リストから条件に合う要素のみを取得した新しいリストを作成する方法を示す。 Java Ja</description>
    </item>
    
    <item>
      <title>リストが空であるか判別する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/isempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/isempty/</guid>
      <description>リストが空であるか判別する # リストが空（＝要素が何も入っていない状態）であるか判別する方法についてを示す。 Java JavaではListクラスにリス</description>
    </item>
    
    <item>
      <title>リストに要素を加える</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/append/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/append/</guid>
      <description>リストに要素を加える # リストに要素を加える方法についてを示す。 Java JavaではListクラスに**add()**というメソッドがあり、引数の要</description>
    </item>
    
    <item>
      <title>リストのソート</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/sort/</guid>
      <description>リストのソート # リスト内の要素をソートする方法についてを示す。 Java Javaではリストに関するメソッドがあるライブラリjava.util.Col</description>
    </item>
    
    <item>
      <title>リストの全要素の合計値</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/sum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/sum/</guid>
      <description>リストの全要素の合計値 # リスト中の全要素を合計した値を取得する方法についてを示す。 またここで扱うリスト内の要素は全て数値であることを前提とす</description>
    </item>
    
    <item>
      <title>リストの全要素を連結して１つの文字列に変換する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/join/</guid>
      <description>リストの全要素を連結して１つの文字列に変換する # リストの全要素を連結して1つの文字列にする方法についてを示す。 なお、前提としてここでいうリス</description>
    </item>
    
    <item>
      <title>リストの定義</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_overview/</guid>
      <description>リストの定義 # リストについて。 Java Javaのリストは配列とは全く別のデータ型として定義されてあり、その定義はjava.util.Listクラス</description>
    </item>
    
    <item>
      <title>リストの宣言</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list/</guid>
      <description>リストの宣言 # リストを使用する方法を示す。 Java JavaでのリストはListクラスをインポートして利用する。 しかし、Listクラスはインターフェ</description>
    </item>
    
    <item>
      <title>リストの指定したインデックスの要素を削除する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/pop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/pop/</guid>
      <description>リストの指定したインデックスの要素を削除する # リストの指定した位置の要素を削除する方法についてを示す。 Java JavaではListクラスにリストの</description>
    </item>
    
    <item>
      <title>リストの指定した位置に要素追加</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/insert/</guid>
      <description>リストの指定した位置に要素追加 # リストの指定した位置に要素を追加する方法についてを示す。 Java JavaではListクラスに**add()**とい</description>
    </item>
    
    <item>
      <title>リストの指定した要素を削除する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/remove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/remove/</guid>
      <description>リストの指定した要素を削除する # リストの指定した要素を削除する方法についてを示す。 Java JavaではListクラスにリストの指定した要素を削除す</description>
    </item>
    
    <item>
      <title>リストの長さ</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/len/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/len/</guid>
      <description>リストの長さ # リストの長さ（＝リストに入っているデータの個数）を取得する方法を示す。 Java JavaではListクラスに**size()**という</description>
    </item>
    
    <item>
      <title>リストを空にする</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/clear/</guid>
      <description>リストを空にする # リストから全ての要素を削除する方法についてを述べる。 Java JavaではListクラスにあるメソッドclear() を利用する。 void</description>
    </item>
    
    <item>
      <title>リストを逆順にする</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/reverse/</guid>
      <description>リストを逆順にする # リスト内の要素を逆順にする方法についてを示す。 Java Javaではライブラリjava.util.Collectionsに、リス</description>
    </item>
    
    <item>
      <title>リストを逆順にソート</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/reverse_sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/reverse_sort/</guid>
      <description>リストを逆順にソート # リスト内の要素を逆順にソートする方法についてを示す。 Java Javaではリストを逆順にソートするメソッドは無いため、前述のリ</description>
    </item>
    
    <item>
      <title>リスト内の指定した２要素を入れ替える</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/swap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/swap/</guid>
      <description>リスト内の指定した２要素を入れ替える # リストの指定した２つの位置の要素を入れ替える方法についてを示す。 Java JavaはListの親クラスであるC</description>
    </item>
    
    <item>
      <title>リスト内の要素の最大値を取得する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/max/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/max/</guid>
      <description>リスト内の要素の最大値を取得する # リスト内の要素のうち一番大きい値を取得する方法についてを示す。 Java Javaではリストに関するメソッドがあるラ</description>
    </item>
    
    <item>
      <title>リスト内の要素の最小値を取得する</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/min/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/min/</guid>
      <description>リスト内の要素の最小値を取得する # リスト内の要素のうち一番小さい値を取得する方法についてを示す。 Java Javaではリストに関するメソッドがあるラ</description>
    </item>
    
    <item>
      <title>リスト内包表記</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/comprehension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/comprehension/</guid>
      <description>リスト内包表記 # リスト内包表記についてを示す。 Python リスト内包とは大かっこ [ ] の中に式とfor文（・if文）を書くことにより、その式によって評価</description>
    </item>
    
    <item>
      <title>ルビ</title>
      <link>https://WAT36.github.io/pages/docs/front-end/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/ruby/</guid>
      <description>ルビ # HTML文書にルビ(ふりがな)を記載するための要素についてをここでは述べる。 ruby要素 # ruby要素は文字にルビを振る要素であり、実</description>
    </item>
    
    <item>
      <title>レスポンシブWebデザイン</title>
      <link>https://WAT36.github.io/pages/docs/front-end/responsive_web_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/responsive_web_design/</guid>
      <description>レスポンシブWebデザイン # レスポンシブWebデザインについて。 レスポンシブWebデザインとは、1つのHTMLを画面幅などの特性が異なったデ</description>
    </item>
    
    <item>
      <title>ロジスティック回帰モデル</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/logistic_regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/logistic_regression/</guid>
      <description>ロジスティック回帰モデル # 前述の１次元入力２クラス分類において、最適な決定境界を引くにはどうすれば良いのだろうか。 方法の一つとしてロジスティ</description>
    </item>
    
    <item>
      <title>一変数関数f(x)をグラフに描画する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/func_plot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/func_plot/</guid>
      <description>一変数関数f(x)をグラフに描画する # 定義した一変数関数f(x)をグラフに描画する方法を示す。 Python 一変数関数f(x)を描画するには、まず自分で</description>
    </item>
    
    <item>
      <title>三項演算子(条件演算子)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/ternary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/ternary/</guid>
      <description>三項演算子(条件演算子) # 条件分岐を行う三項演算子についてを示す。 Java Javaでは三項演算子 &amp;ldquo;?&amp;rdquo; が実装されている。 例えば a ? b : c としたとき、a</description>
    </item>
    
    <item>
      <title>二部グラフ</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/bipartite_graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/bipartite_graph/</guid>
      <description>二部グラフ # 前述のグラフの彩色問題において、彩色数(グラフの頂点を彩色するのに必要な最小の色数)が2であるグラフを二部グラフという。 グラフが</description>
    </item>
    
    <item>
      <title>交差エントロピー誤差</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/cross_entropy_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/cross_entropy_error/</guid>
      <description>交差エントロピー誤差 # 前述のロジスティック回帰モデルにおいて、入力xがt＝1となる確率を次のように表す。 \(y = \sigma ( w_{0} x &amp;#43; w_{1} ) = P(t=1 \mid x)\) ここから、</description>
    </item>
    
    <item>
      <title>交差検証</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/cross_validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/cross_validation/</guid>
      <description>交差検証 # 先述のホールドアウト検証では、訓練(テスト)データの選び方によって出力結果が変わってくることを話した。なるべく変化が少なくなるよう</description>
    </item>
    
    <item>
      <title>任意の底の対数</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/log/</guid>
      <description>任意の底の対数 # 任意の底の対数を算出する方法についてを示す。 しかし、任意の底の対数を算出するライブラリは無いことが多い。 そのため、以下の公式</description>
    </item>
    
    <item>
      <title>例外の明示的な発生</title>
      <link>https://WAT36.github.io/pages/docs/programming/exception/throw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/exception/throw/</guid>
      <description>例外の明示的な発生 # 例外(エラー)は実行時にコードの不備によりに起こるのみではなく、（コード中で）自分で意図的に発生させることもできる。ここ</description>
    </item>
    
    <item>
      <title>例外処理</title>
      <link>https://WAT36.github.io/pages/docs/programming/exception/exception_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/exception/exception_index/</guid>
      <description>例外処理 # プログラミングをする上で誰もが経験するのはエラー（例外）だろう。 コンパイルエラーに関しては文法上の問題なので、ここでは主に実行時エ</description>
    </item>
    
    <item>
      <title>例外処理(try文)</title>
      <link>https://WAT36.github.io/pages/docs/programming/exception/try/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/exception/try/</guid>
      <description>例外処理(try文) # 実行時エラー(例外)のハンドリングを行うtry文についてを示す。 言語により微妙に呼び名が違うところがあるので注意。 Java J</description>
    </item>
    
    <item>
      <title>免責事項</title>
      <link>https://WAT36.github.io/pages/docs/about/disclaimer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/about/disclaimer/</guid>
      <description>免責事項 # 本ブログにおける免責事項は、下記の通りです。 本ブログの情報の正確性について # 本ブログのコンテンツや情報において、可能な限り正確な情</description>
    </item>
    
    <item>
      <title>円周率(π)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/pi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/pi/</guid>
      <description>円周率(π) # 重要な定数は大体ライブラリ（モジュール）内で定義されていることが多い。 ここでは円周率(π)を参照する方法についてを示す。 Java Ja</description>
    </item>
    
    <item>
      <title>制御構文</title>
      <link>https://WAT36.github.io/pages/docs/programming/control/control_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/control/control_index/</guid>
      <description>制御構文 # プログラミングをする上で必ずと言っていいほど出るのがこの制御構文。 条件分岐やループなど、処理の流れを制御する文の記法などをここでは</description>
    </item>
    
    <item>
      <title>動画・音声(JavaScript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/img_js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/img_js/</guid>
      <description>動画・音声(JavaScript) # 前述のHTMLの章で動画・音声についてを述べたが、実は動画・音声ファイルに関してはJavascriptで</description>
    </item>
    
    <item>
      <title>動的計画法</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/dynamic_planning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/dynamic_planning/</guid>
      <description>動的計画法 # 動的計画法について。 動的計画法とはアルゴリズム設計手法の一つで、配列やリストの要素をそれ以前に算出した別の要素を使って算出する手</description>
    </item>
    
    <item>
      <title>動的計画法の応用題</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/dp_applied/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/dp_applied/</guid>
      <description>動的計画法の応用題 # 動的計画法の応用問題をいくつか紹介する。 最長共通部分列問題 # 例えば以下のような問題。 ２つの文字列s,tの共通部分文字列の</description>
    </item>
    
    <item>
      <title>勾配法(最急降下法)</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/steepest_descent_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/steepest_descent_method/</guid>
      <description>勾配法(最急降下法) # 前述の平均二乗誤差で最も誤差が小さくなるw0,w1を正確に求めるにはどうすればよいのか？ その一例として、ここでは勾配法</description>
    </item>
    
    <item>
      <title>可変長引数の関数</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/variablelength_arg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/variablelength_arg/</guid>
      <description>可変長引数の関数 # 関数やメソッドを定義するとき、引数の数は事前に定義する必要があり、指定された数以外の数を入力することは普通はできない。 しか</description>
    </item>
    
    <item>
      <title>合同式(mod)・逆元</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/inverse_mod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/inverse_mod/</guid>
      <description>合同式(mod)・逆元 # 最近知ったのだが、今は高校数学の課程に合同式が入っているそうだ。 自分はゆとり世代ゆえ正式には学んでない（予備校で少し</description>
    </item>
    
    <item>
      <title>変数の値を1増やす・減らす（インクリメント・デクリメント）</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/increment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/increment/</guid>
      <description>変数の値を1増やす・減らす（インクリメント・デクリメント） # Java Javaではインクリメント・デクリメントの演算子（ ++、&amp;ndash; ）がそれ</description>
    </item>
    
    <item>
      <title>変数を宣言する</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/var/</guid>
      <description>変数を宣言する # 変数を宣言する方法についてを述べる。 Java Javaでの変数の宣言は以下の通り。 (データ型) (変数名); (変数名) = (値); // また</description>
    </item>
    
    <item>
      <title>外部ファイルのインポート</title>
      <link>https://WAT36.github.io/pages/docs/programming/file_io/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/file_io/import/</guid>
      <description>外部ファイルのインポート # プログラムの中で、別のプログラムにある変数や関数を利用したい場合もある。その時はファイルをインポートしてくるのが手</description>
    </item>
    
    <item>
      <title>多次元リスト(配列)である列をキーにしてソートする</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/multisortlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/multisortlist/</guid>
      <description>多次元リスト(配列)である列をキーにしてソートする # リストの中に更にリストが入っているようなリストをソートした時どうなるか？ 各要素(リスト)</description>
    </item>
    
    <item>
      <title>多次元配列</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/multi_array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/multi_array/</guid>
      <description>多次元配列 # 多次元配列とは、配列の中に同じ長さの配列を複数含ませたデータ構造のことである。 Java Javaにおいて、例として二次元配列を設定するに</description>
    </item>
    
    <item>
      <title>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/global-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/global-2/</guid>
      <description>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト） # 大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）につい</description>
    </item>
    
    <item>
      <title>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/global/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/global/</guid>
      <description>大域変数と局所変数（グローバルオブジェクトとCallオブジェクト） # 大域変数と局所変数（グローバルオブジェクトとCallオブジェクト）につい</description>
    </item>
    
    <item>
      <title>定数</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/constant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/constant/</guid>
      <description>定数 # 変数は値を記憶するための入れ物であり、基本、何度でも値を代入することが可能である。 これに対し定数とは、値の入れ物という点では変数と同じ</description>
    </item>
    
    <item>
      <title>小数点以下切り上げ</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/ceil/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/ceil/</guid>
      <description>小数点以下切り上げ # 小数点以下切り上げする方法についてを示す。 Java JavaではMathクラスにあるメソッド**ceil()**を利用することで</description>
    </item>
    
    <item>
      <title>小数点以下切り捨て</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/floor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/floor/</guid>
      <description>小数点以下切り捨て # 小数点以下切り捨てする方法についてを示す。 Java JavaではMathクラスにあるメソッド**floor()**を利用すること</description>
    </item>
    
    <item>
      <title>常用対数(底10)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/log10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/log10/</guid>
      <description>常用対数(底10) # 常用対数を算出する方法についてを示す。 Java Javaではjava.lang.Mathクラス内にある**log10()**メソ</description>
    </item>
    
    <item>
      <title>平均二乗誤差</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/mse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/mse/</guid>
      <description>平均二乗誤差 # 前述の直線モデルにて、データに応じた最適なw0,w1を決めれば最適な関係式が得られると書いたが、 どのようにして最適なw0,w1</description>
    </item>
    
    <item>
      <title>平均交差エントロピー誤差の最適解の導出</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/cee_ans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/cee_ans/</guid>
      <description>平均交差エントロピー誤差の最適解の導出 # 前述の平均交差エントロピー誤差 \(\tag{1} - \frac{1}{N} \log P( { \bf T } \mid { \bf X } ) = - \frac{1}{N} \sum_{n=0}^{N-1} ( t_{n} \log y_{n} &amp;#43; (1 - t_{n}) \log (1 - y_{n}) ) \) が最</description>
    </item>
    
    <item>
      <title>平方根</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/root/</guid>
      <description>平方根 # 平方根（ルート）を計算する方法についてを示す。 方法は大まかに分けると ライブラリにある専用の関数/メソッドを用いる 累乗で求める（n乗根</description>
    </item>
    
    <item>
      <title>手書き文字の認識</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/mnist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/mnist/</guid>
      <description>手書き文字の認識 # ここでは、実用的な問題への応用として、手書き数字をニューラルネットワークを使って認識させてみることを考えてみる。 MNIST</description>
    </item>
    
    <item>
      <title>指定した要素がリスト内にあるか調べる</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_in/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_in/</guid>
      <description>指定した要素がリスト内にあるか調べる # ある要素がリスト内に存在するかを調べる方法についてを示す。 Java JavaではListクラスに**conta</description>
    </item>
    
    <item>
      <title>指定した要素がリスト内にいくつあるか調べる</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/count/</guid>
      <description>指定した要素がリスト内にいくつあるか調べる # 指定した要素がリスト内にいくつあるか調べる方法についてを示す。 Java Javaでは具体的なメソッドが(</description>
    </item>
    
    <item>
      <title>指定した要素のリスト内でのインデックスを調べる</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/indexof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/indexof/</guid>
      <description>指定した要素のリスト内でのインデックスを調べる # 指定した要素がリスト内でどの位置にいるかを調べる方法を示す。 Java JavaではListクラスにあ</description>
    </item>
    
    <item>
      <title>排他的論理和(XOR)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/xor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/xor/</guid>
      <description>排他的論理和(XOR) # XORのビット演算をする方法についてを示す。 Java JavaではXORのビット演算子 ^ を使用する。数値型リテラルでも、bo</description>
    </item>
    
    <item>
      <title>教師あり学習</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/supervised_learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/supervised_learning/</guid>
      <description>教師あり学習 # 教師あり学習とは何か？ 教師あり学習とは与えられた入力とそれに対する結果のデータセットを元に、それとは別の新しい入力に対する結果</description>
    </item>
    
    <item>
      <title>教師なし学習</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/unsupervised_learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/unsupervised_learning/</guid>
      <description>教師なし学習 # 教師なし学習について。 教師なし学習は教師あり学習とは違い、入力データに対する答え(目標データ)が与えられず、入力データからデー</description>
    </item>
    
    <item>
      <title>数値の絶対値を算出する</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/abs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/abs/</guid>
      <description>数値の絶対値を算出する # 数値の絶対値を算出する方法についてを示す。 Java Javaではjava.lang.Mathクラス内にある**abs()**</description>
    </item>
    
    <item>
      <title>数値の頭をゼロ詰して表示する</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/zfill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/zfill/</guid>
      <description>数値の頭をゼロ詰して表示する # 数値の頭をゼロ詰して表示する方法についてを示す。 Java JavaではStringクラスにあるformat() メソッド</description>
    </item>
    
    <item>
      <title>数値をランダムに取得する(乱数)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/random/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/random/</guid>
      <description>数値をランダムに取得する(乱数) # なんでもいいから適当に数値を取ってきたい場合どうするか？その時は乱数というのを使う。ここではその方法につい</description>
    </item>
    
    <item>
      <title>数値を文字列に変換する</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/str/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/str/</guid>
      <description>数値を文字列に変換する # 文字列を数値にする方法があったように、逆の数値を文字列に変換する方法も存在する。 ここではその方法を示す。 Java Javaで</description>
    </item>
    
    <item>
      <title>数値微分法</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/numerical_differentiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/numerical_differentiation/</guid>
      <description>数値微分法 # 前述のフィードフォワードニューラルネットワークにおいて、最適な重み行列w,vの値を求めるために指標となる誤差関数を、教師あり学習</description>
    </item>
    
    <item>
      <title>数値（整数）の桁数を調べる</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/digits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/digits/</guid>
      <description>数値（整数）の桁数を調べる # 整数の桁数を調べる方法については、 数値を文字列に変換してその文字列の長さを取得すればよい。 Java Javaでは数値を文</description>
    </item>
    
    <item>
      <title>文字列の長さ（文字数）を調べる</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/length/</guid>
      <description>文字列の長さ（文字数）を調べる # 文字列の長さ（＝文字列が何文字であるか）を取得する方法を示す。 Java JavaではStringクラスに**leng</description>
    </item>
    
    <item>
      <title>文字列を１文字ずつのリストにする</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/string_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/string_list/</guid>
      <description>文字列を１文字ずつのリストにする # 文字列を1文字ずつのリストに変換する方法についてを示す。 Java Javaでは以下２つの手順を踏んで行う。 文字列を</description>
    </item>
    
    <item>
      <title>文字列中にある文字列が含まれているときにその位置を確認する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/find/</guid>
      <description>文字列中にある文字列が含まれているときにその位置を確認する # 文字列中に特定の文字列が含まれていた時、その位置を確認したい場合どうするか？ ここ</description>
    </item>
    
    <item>
      <title>最小全域木</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/minimum_spanning_tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/minimum_spanning_tree/</guid>
      <description>最小全域木 # 無向グラフが与えられたときに、その内のある辺だけを用いてグラフ中の任意の２頂点を連結(ある頂点から他のどの頂点への経路が存在する</description>
    </item>
    
    <item>
      <title>最尤推定</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/maximum_likelihood/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/maximum_likelihood/</guid>
      <description>最尤推定 # 当たりとハズレがそれぞれ何個か入ったくじがあり、当たりが出た時を１、ハズレが出た時を０と設定する。 この時、n回目にくじを引いた時の</description>
    </item>
    
    <item>
      <title>条件付き確率</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/conditional_probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/conditional_probability/</guid>
      <description>条件付き確率 # 私は高校で条件付き確率を学んでこなかったゆとり世代なので、改めて条件付き確率において書き記していく。 事象A,Bにおいて、ある事</description>
    </item>
    
    <item>
      <title>機械学習</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/ml_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/ml_index/</guid>
      <description>機械学習 # 機械学習の手法についてをまとめる。 教師あり学習 回帰 直線モデル(線形回帰) 平均二乗誤差 勾配法(最急降下法) 解析解 2次元入力の面モデル</description>
    </item>
    
    <item>
      <title>正規表現</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/re/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/re/</guid>
      <description>正規表現 # 文字列に正規表現を適用してある文字列パターンを抽出・検索したいという場合があると思う。 その場合に利用する方法を示す。 ちなみに正規表</description>
    </item>
    
    <item>
      <title>歪み尺度</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/distortion_measure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/distortion_measure/</guid>
      <description>歪み尺度 # 教師あり学習では、学習が進み精度が高くなることの指標として、平均交差エントロピー誤差のような関数を利用していた。 教師なし学習、今回</description>
    </item>
    
    <item>
      <title>比較演算子</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/comparison_operator-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/comparison_operator-3/</guid>
      <description>比較演算子 # 比較演算子についてをまとめておく。 Java Javaでの主な比較演算子は以下の通り。 演算子 意味 例 &amp;lt; 未満 a &amp;lt; b &amp;lt;= 以下 a &amp;lt;= b &amp;gt; より大きい a &amp;gt;</description>
    </item>
    
    <item>
      <title>比較演算子</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/comparison_operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/comparison_operator/</guid>
      <description>比較演算子 # 比較演算子についてをまとめておく。 Java Javaでの主な比較演算子は以下の通り。 演算子 意味 例 &amp;lt; 未満 a &amp;lt; b &amp;lt;= 以下 a &amp;lt;= b &amp;gt; より大きい a &amp;gt;</description>
    </item>
    
    <item>
      <title>深さ優先探索</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/dfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/dfs/</guid>
      <description>深さ優先探索 # 探索の手法の一つである深さ優先探索についてを述べる。 深さ優先探索とは、ある状態から始めてそこから遷移出来なくなるまで状態を進め</description>
    </item>
    
    <item>
      <title>混合ガウスモデル</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/gaussian_mixture_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/gaussian_mixture_model/</guid>
      <description>混合ガウスモデル # 先程のk-means法では、データを必ずどれか一つのクラスターに割り当てていたが、複数のクラスターに割り当てると言うことは</description>
    </item>
    
    <item>
      <title>画像・動画・音声</title>
      <link>https://WAT36.github.io/pages/docs/front-end/img/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/img/</guid>
      <description>画像・動画・音声 # 画像・動画・音声についての要素を述べる。 img要素 # img要素は画像を表示させたい時、及びそれが利用できない時に代わりに表</description>
    </item>
    
    <item>
      <title>直線モデル(線形回帰)</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/linear_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/linear_model/</guid>
      <description>直線モデル # 回帰問題の手法の一つである直線モデルについて。 教師あり学習 で与えられた入力と結果から関係式を算出すると言うことを述べたが、 必ずし</description>
    </item>
    
    <item>
      <title>競プロテク</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/procon_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/procon_index/</guid>
      <description>競プロテク # 競技プログラミングでよく使う手法についてまとめる。 個人的に学びながらなので進度遅めかも 探索 深さ優先探索 キュー(Pythonでの実</description>
    </item>
    
    <item>
      <title>継承</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/inheritance/</guid>
      <description>継承 # クラスを実装できる言語の大半は、他のクラスの構造を受け継ぎ、そこから新しい変数やメソッド(関数)等を付け足す形でクラスを定義することが</description>
    </item>
    
    <item>
      <title>線形基底関数モデル</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/linear_basis_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/linear_basis_function/</guid>
      <description>線形基底関数モデル # 先ほどまでの章では、データの予測に直線モデルを利用していたが、勿論直線モデルを利用するのが必ずしも最適ではないという場合</description>
    </item>
    
    <item>
      <title>繰り返し二乗法</title>
      <link>https://WAT36.github.io/pages/docs/programming/procon/repeated_square/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/procon/repeated_square/</guid>
      <description>繰り返し二乗法 # 例えば、210100を計算しようとした時、単純にループで１回ずつ掛け算していくと計算にかなりの時間を要してしまう。 ループで一</description>
    </item>
    
    <item>
      <title>自分で例外クラスを定義する</title>
      <link>https://WAT36.github.io/pages/docs/programming/exception/myexception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/exception/myexception/</guid>
      <description>自分で例外クラスを定義する # 基本、例外(エラー)はあらかじめ定義されている、対応する例外を示すクラスが投げられるという形で例外の発生を示すが</description>
    </item>
    
    <item>
      <title>自然対数(底e)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/loge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/loge/</guid>
      <description>自然対数(底e) # 自然対数を算出する方法についてを示す。 Java Javaではjava.lang.Mathクラス内にある**log()**メソッドが</description>
    </item>
    
    <item>
      <title>複数の数字のうち最も大きい数字をとる</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/max/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/max/</guid>
      <description>複数の数字のうち最も大きい数字をとる # 複数の数値から一番大きい数値を取り出したい時の方法を示す。 Java Javaではjava.lang.Mathク</description>
    </item>
    
    <item>
      <title>複数の数字のうち最も小さい数字をとる</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/min/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/min/</guid>
      <description>複数の数字のうち最も小さい数字をとる # 複数の数値から一番小さい数値を取り出したい時の方法を示す。 Java Javaではjava.lang.Mathク</description>
    </item>
    
    <item>
      <title>要素とタグ</title>
      <link>https://WAT36.github.io/pages/docs/front-end/element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/element/</guid>
      <description>要素とタグ # HTMLは、各コンテンツの内容をタグで囲い、それが文書の内の何であるかを示す言語である。 HTML文書内の各構成要素の事を要素(e</description>
    </item>
    
    <item>
      <title>要素の種類</title>
      <link>https://WAT36.github.io/pages/docs/front-end/elements_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/elements_type/</guid>
      <description>要素の種類 # 先程述べた要素には色々な種類がある。 大きく分けると以下の7種類。 フローコンテンツ 見出しコンテンツ セクショニングコンテンツ フレージ</description>
    </item>
    
    <item>
      <title>解析解</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/analytical_solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/analytical_solution/</guid>
      <description>解析解 # 先程の直線モデルの例では勾配法を用いてw0、w1の値を求めたが、実は勾配法を用いなくても数式を計算していけば最適なw0、w1が求めら</description>
    </item>
    
    <item>
      <title>誤差逆伝搬法</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/back_propagation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/back_propagation/</guid>
      <description>誤差逆伝搬法（バックプロパゲーション） # 誤差逆伝搬法（バックプロパゲーション）はフィードフォワードネットワークモデルに学習をさせる方法として</description>
    </item>
    
    <item>
      <title>論理和(OR)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/or_bit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/or_bit/</guid>
      <description>論理和(OR) # ORのビット演算をする方法についてを示す。 Java JavaではORのビット演算子 | を使用する。論理演算の時とは違い、こちらは|1個</description>
    </item>
    
    <item>
      <title>論理演算</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/logical_operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/logical_operator/</guid>
      <description>論理演算 論理演算を行う際に利用する演算子についてを述べる。 AND演算 # AND演算は入力した２値が両方とも真であった時に真を返し、それ以外は偽</description>
    </item>
    
    <item>
      <title>論理積(AND)</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/and_bit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/and_bit/</guid>
      <description>論理積(AND) # ANDのビット演算をする方法についてを示す。 Java JavaではANDのビット演算子 &amp;amp; を使用する。論理演算の時とは違い、こちらは</description>
    </item>
    
    <item>
      <title>軸にラベルを設定する</title>
      <link>https://WAT36.github.io/pages/docs/programming/graph/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/graph/label/</guid>
      <description>軸にラベルを設定する # Python グラフの軸にラベルを設定、表示するにはpyplotの関数xlabel(&amp;lsquo;ラベル名&amp;rsquo;)、**y</description>
    </item>
    
    <item>
      <title>辞書(Map)</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/map/</guid>
      <description>辞書(Map) # 辞書(Map)とは何か？ 辞書(Map)とは &amp;ldquo;キー&amp;rdquo; と &amp;ldquo;値&amp;rdquo; の２つの要素からな</description>
    </item>
    
    <item>
      <title>辞書(Map)からキーのリストを取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/keylist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/keylist/</guid>
      <description>辞書(Map)からキーのリストを取得 # 辞書(Map)からキーのリストを取得する方法についてを示す。 Java JavaではMapクラスに**keySe</description>
    </item>
    
    <item>
      <title>辞書(Map)からキーを指定して値を取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/get/</guid>
      <description>辞書(Map)からキーを指定して値を取得 # 辞書(Map)からキーを指定して値を取得する方法についてを示す。 Java JavaではMapクラスに**g</description>
    </item>
    
    <item>
      <title>辞書(Map)から値のリストを取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/valuelist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/valuelist/</guid>
      <description>辞書(Map)から値のリストを取得 # 辞書(Map)から値のリストを取得を取得する方法についてを示す。 Java JavaではMapクラスに**valu</description>
    </item>
    
    <item>
      <title>辞書(Map)から最大のキーを取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/maxkey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/maxkey/</guid>
      <description>辞書(Map)から最大のキーを取得 # 辞書(Map)から最大のキーを取得する方法についてを示す。 Java JavaでMapにあるキーの最大値を取得する</description>
    </item>
    
    <item>
      <title>辞書(Map)から最大の値を取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/maxval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/maxval/</guid>
      <description>辞書(Map)から最大の値を取得 # 辞書(Map)から最大の値を取得する方法についてを示す。 Java JavaでMapにある値の最大値を取得するには以</description>
    </item>
    
    <item>
      <title>辞書(Map)から最小のキーを取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/minkey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/minkey/</guid>
      <description>辞書(Map)から最小のキーを取得 # 辞書(Map)から最小のキーを取得する方法についてを示す。 Java JavaでMapにあるキーの最小値を取得する</description>
    </item>
    
    <item>
      <title>辞書(Map)から最小の値を取得</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/minval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/minval/</guid>
      <description>辞書(Map)から最小の値を取得 # 辞書(Map)から最小の値を取得する方法についてを示す。 Java JavaでMapにある値の最小値を取得するには、</description>
    </item>
    
    <item>
      <title>辞書(Map)から要素削除</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/pop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/pop/</guid>
      <description>辞書(Map)から要素削除 # 辞書(Map)から要素を削除する方法についてを示す。 Java JavaではMapクラスに**remove()**というメ</description>
    </item>
    
    <item>
      <title>辞書(Map)に要素を追加する</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/put/</guid>
      <description>辞書(Map)に要素を追加する # 辞書(Map)に要素(キー・値)を追加する方法についてを示す。 Java JavaではMapクラスに**put()**</description>
    </item>
    
    <item>
      <title>辞書(Map)のループ</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/dict_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/dict_loop/</guid>
      <description>辞書(Map)のループ # 辞書(Map)のループを行う方法についてを示す。 Java JavaでMapにループを掛けるには、Mapのメソッドである**e</description>
    </item>
    
    <item>
      <title>辞書、Map</title>
      <link>https://WAT36.github.io/pages/docs/programming/map/map_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/map/map_index/</guid>
      <description>辞書、Map # 辞書、Mapについての記事。 多くの言語でこれに似たようなデータ構造がある（と予想している）が、言語により名前が違うので注意。 J</description>
    </item>
    
    <item>
      <title>通信(Javascript)</title>
      <link>https://WAT36.github.io/pages/docs/front-end/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/websocket/</guid>
      <description>通信(Javascript) # Javascriptにおける通信の方法についてを述べる。 WebSocket # WebSocketはHTTPとは異なる、双方向通信</description>
    </item>
    
    <item>
      <title>配列</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/array/</guid>
      <description>配列 # 配列とは、同じデータ型の値をまとめて扱いたい時に利用するデータ構造である。ここでは配列の定義方法についてを述べる。 なお、Pythonに</description>
    </item>
    
    <item>
      <title>関数(メソッド)の定義</title>
      <link>https://WAT36.github.io/pages/docs/programming/class_func/func/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/class_func/func/</guid>
      <description>関数(メソッド)の定義 # 関数・メソッドを定義する方法についてを示す。 Java Javaではメソッドと言う名で呼ばれる。定義するための記法は以下の通り</description>
    </item>
    
    <item>
      <title>関数、メソッドのヘルプを見る</title>
      <link>https://WAT36.github.io/pages/docs/programming/other/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/other/help/</guid>
      <description>関数、メソッドのヘルプを見る # 関数やメソッドの使い方がわからないとき、ヘルプを見る方法がある。それについてを述べる。 ただし、対話型などこちら</description>
    </item>
    
    <item>
      <title>階乗</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/factorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/factorial/</guid>
      <description>階乗 # 階乗計算についてを示す。 基本、階乗計算はn * n-1 * n-2 * &amp;hellip; * 1を地道にやっていく計算量O(n)の計算を行うので、時間がかかりやすいという特</description>
    </item>
    
    <item>
      <title>難解プログラミング言語</title>
      <link>https://WAT36.github.io/pages/docs/ctf/esolang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/ctf/esolang/</guid>
      <description>難解プログラミング言語 # 難解プログラミング言語とは、意図的に解読が困難になるように設計されたプログラミング言語である。 実用性を考慮して作られ</description>
    </item>
    
    <item>
      <title>１次元入力２クラス分類</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/1d_2class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/1d_2class/</guid>
      <description>１次元入力２クラス分類 # 先述までに述べた回帰問題は、入力データから具体的な連続した数値を予測するものであったが、ここからの分類問題は入力デー</description>
    </item>
    
    <item>
      <title>２次元入力２クラス分類</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/2d_2class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/2d_2class/</guid>
      <description>２次元入力２クラス分類 # 前章では１次元入力であったが、次は２次元入力の場合を考えてみる。 １次元入力２クラス分類で使用したデータに、pHのデー</description>
    </item>
    
    <item>
      <title>２次元入力３クラス分類</title>
      <link>https://WAT36.github.io/pages/docs/programming/machine_learning/2d_3class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/machine_learning/2d_3class/</guid>
      <description>２次元入力３クラス分類 # 次は２次元入力において、３クラス分類を行うケースについてを考える。 先程の２次元入力２クラス分類のデータに、良いでも悪</description>
    </item>
    
    <item>
      <title>２進数に変換して表示</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/bin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/bin/</guid>
      <description>2進数に変換して表示 # 数値を2進数に変換して表示する方法についてを示す。 Java JavaではラッパークラスIntegerに数値を2進数に変換するメ</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://WAT36.github.io/pages/docs/sample/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/creating-a-new-theme/</guid>
      <description>Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://WAT36.github.io/pages/docs/sample/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/migrate-from-jekyll/</guid>
      <description>Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://WAT36.github.io/pages/docs/container/docker_file/</link>
      <pubDate>Sun, 07 Mar 2021 00:21:02 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/container/docker_file/</guid>
      <description>Dockerfile # Dockerでは、Dockerfile という名のファイルを使って、Dockerイメージを作り出すことができる。 Dockerfile内で利</description>
    </item>
    
    <item>
      <title>Dockerコンテナの内部への接続</title>
      <link>https://WAT36.github.io/pages/docs/container/docker_attach/</link>
      <pubDate>Sat, 06 Mar 2021 23:51:01 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/container/docker_attach/</guid>
      <description>Dockerコンテナの内部への接続 # ここでは、起動したコンテナの操作方法についてを述べる。 起動中のコンテナに接続する # 起動しているコンテナに</description>
    </item>
    
    <item>
      <title>数値</title>
      <link>https://WAT36.github.io/pages/docs/programming/number/number_index/</link>
      <pubDate>Sun, 03 Nov 2019 08:07:28 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/number/number_index/</guid>
      <description>数値 # 数値についての記事。 数値の演算 対数 常用対数(底10) 自然対数(底e) 任意の底の対数 小数点以下切り捨て 小数点以下切り上げ 小数点以下四捨五</description>
    </item>
    
    <item>
      <title>文字列中にある文字列が含まれているかを確認する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/contain/</link>
      <pubDate>Tue, 29 Oct 2019 23:27:48 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/contain/</guid>
      <description>文字列中にある文字列が含まれているかを確認する # 文字列中に特定の文字列を含んでいるかを確認したい場合どうするか？ ここではその方法についてを示</description>
    </item>
    
    <item>
      <title>文字列をある文字で分割する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/split/</link>
      <pubDate>Tue, 29 Oct 2019 23:19:29 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/split/</guid>
      <description>文字列をある文字で分割する # 文字列に対して、ある文字を境に複数に分割したいという場面もあるだろう。 ここではその方法についてを示す。 Java Java</description>
    </item>
    
    <item>
      <title>1文字からその文字の文字コード（アスキーコード）を取得する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/ascii/</link>
      <pubDate>Thu, 24 Oct 2019 20:43:32 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/ascii/</guid>
      <description>1文字からその文字の文字コード（アスキーコード）を取得する # コンピュータは二進数しか扱えないため、文字データも二進数（つまり整数）として扱わ</description>
    </item>
    
    <item>
      <title>文字列を宣言する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/string/</link>
      <pubDate>Thu, 17 Oct 2019 22:05:28 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/string/</guid>
      <description>文字列を宣言する # 文字列のデータ（文字列リテラル）を宣言するにはどうすればよいか？ Java クラスはここではMain.javaとする class Main{ public static void main(String args[]){ char</description>
    </item>
    
    <item>
      <title>文字列を数値に変換する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/parseInt/</link>
      <pubDate>Tue, 15 Oct 2019 22:02:08 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/parseInt/</guid>
      <description>文字列を数値に変換する # 数字の文字列を数値に変換する方法を述べる。 ちなみに、逆の数値を文字列にする方法もある。 Java クラスはここではMain.j</description>
    </item>
    
    <item>
      <title>文字列に別の文字列を追加する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/append/</link>
      <pubDate>Mon, 14 Oct 2019 23:58:19 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/append/</guid>
      <description>文字列に別の文字列を追加する # 文字列の末尾に別の文字列を繋げる方法についてまとめる。 Java javaの場合は使用しているクラスにより方法が異なる。</description>
    </item>
    
    <item>
      <title>文字列を別の文字列に置換する</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/replace/</link>
      <pubDate>Mon, 14 Oct 2019 23:46:41 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/replace/</guid>
      <description>文字列を別の文字列に置換する # 文字列を別の文字列に置換する方法。 その文字列全ての他、文字列の一部分または文字列中の条件に合う文字列に対する置</description>
    </item>
    
    <item>
      <title>英字文字列を全て英字小文字にする</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/lower/</link>
      <pubDate>Mon, 14 Oct 2019 23:40:21 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/lower/</guid>
      <description>英字文字列を全て英字小文字にする # 英字の文字列を全て小文字にする方法について。 小文字の場合も、大文字同様にほとんどの言語で関数やメソッドが用</description>
    </item>
    
    <item>
      <title>英字文字列を全て英字大文字にする</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/upper/</link>
      <pubDate>Mon, 14 Oct 2019 23:32:45 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/upper/</guid>
      <description>英字文字列を全て英字大文字にする # 英字の文字列を全て大文字にする方法について。 ほとんどの言語では、だいたいこの手の関数やメソッドが用意されて</description>
    </item>
    
    <item>
      <title>文字列</title>
      <link>https://WAT36.github.io/pages/docs/programming/string/string_index/</link>
      <pubDate>Mon, 14 Oct 2019 23:26:28 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/string/string_index/</guid>
      <description>文字列 # 文字列についての記事。 文字列の宣言 文字列を宣言する 文字列の変換・置換 英字文字列を全て英字大文字にする 英字文字列を全て英字小文字にする</description>
    </item>
    
    <item>
      <title>標準エラー出力</title>
      <link>https://WAT36.github.io/pages/docs/programming/stdio/stderr/</link>
      <pubDate>Sat, 12 Oct 2019 17:25:47 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/stdio/stderr/</guid>
      <description>標準エラー出力 # 標準エラー出力について。 Java クラスはここではMain.javaとする class Main{ public static void main(String args[]){ //出力後、改行したい時 System.err</description>
    </item>
    
    <item>
      <title>標準出力</title>
      <link>https://WAT36.github.io/pages/docs/programming/stdio/stdout/</link>
      <pubDate>Sat, 12 Oct 2019 17:19:30 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/stdio/stdout/</guid>
      <description>標準出力 # 標準出力について。 Java クラスはここではMain.javaとする class Main{ public static void main(String args[]){ //出力後、改行したい時 System.out.print</description>
    </item>
    
    <item>
      <title>コンソール入力</title>
      <link>https://WAT36.github.io/pages/docs/programming/stdio/console_input/</link>
      <pubDate>Sat, 12 Oct 2019 17:03:35 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/stdio/console_input/</guid>
      <description>コンソール入力 # 標準入力のコンソール入力について。 Java クラスはここではMain.javaとする import java.util.Scanner class Main{ public static void main(String args[]){ //Scannerのインスタン</description>
    </item>
    
    <item>
      <title>コマンドライン引数</title>
      <link>https://WAT36.github.io/pages/docs/programming/stdio/commandline_input/</link>
      <pubDate>Sat, 12 Oct 2019 16:42:45 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/stdio/commandline_input/</guid>
      <description>コマンドライン引数 # 標準入力のコマンドライン引数について。 Java クラスはここではMain.javaとする class Main{ public static void main(String args[]){ String[] input = args //コマンドライン</description>
    </item>
    
    <item>
      <title>標準入力・出力</title>
      <link>https://WAT36.github.io/pages/docs/programming/stdio/stdio_index/</link>
      <pubDate>Thu, 10 Oct 2019 07:33:35 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/stdio/stdio_index/</guid>
      <description>標準入力・出力 # 標準入力・出力についての記事。 標準入力 コマンドライン引数 コンソール入力 標準出力 標準出力 標準エラー出力 データの入力について ソー</description>
    </item>
    
    <item>
      <title>配列・リスト</title>
      <link>https://WAT36.github.io/pages/docs/programming/list/list_index/</link>
      <pubDate>Tue, 03 Sep 2019 22:53:31 +0900</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/list/list_index/</guid>
      <description>配列・リスト # 配列・リストについての記事。 これらは言語により定義が違うので注意。 例えばJavaでは配列とリストは別のデータ構造だが、 Pyth</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://WAT36.github.io/pages/docs/sample/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://WAT36.github.io/pages/docs/sample/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/examples/</guid>
      <description>Ubi loqui #  Mentem genus facietque salire tempus bracchia #  Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.
Rapit vocant si hunc siste adspice #  Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/hidden/</guid>
      <description>This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
 Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/sample_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/sample_index/</guid>
      <description>サンプルページ # creating-a-new-theme # example # goisforlovers # hidden # hugoisforlovers # migrate-from-jekyll # shortcodes # with-toc # without-toc #</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/shortcodes/</guid>
      <description>Shortcodes #  Expand shortcode #  Default #  {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   Expand ↕  Markdown content Lorem markdownum insigne&amp;hellip;    With Custom Label #  {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/with-toc/</guid>
      <description>Caput vino delphine in tamen vias #  Cognita laeva illo fracta #  Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
 Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere #  Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://WAT36.github.io/pages/docs/sample/without-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/sample/without-toc/</guid>
      <description>At me ipso nepotibus nunc celebratior genus #  Tanto oblite #  Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description>
    </item>
    
    <item>
      <title>CTF</title>
      <link>https://WAT36.github.io/pages/docs/ctf/ctf_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/ctf/ctf_index/</guid>
      <description>CTFメモ # 最近CTFにも興味が出て参加しているが、なかなかテクニックが覚えられないため、備忘のために覚えたことを書き記しておくためのページ</description>
    </item>
    
    <item>
      <title>フロントエンド</title>
      <link>https://WAT36.github.io/pages/docs/front-end/front_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/front-end/front_index/</guid>
      <description>フロントエンド-memo # フロントエンドの勉強用メモ。まずはHTMLから頑張ります・・ (初心者なので奥深くは書ききれておりません。悪しからず</description>
    </item>
    
    <item>
      <title>プログラミング言語別対応メモ</title>
      <link>https://WAT36.github.io/pages/docs/programming/jp_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://WAT36.github.io/pages/docs/programming/jp_index/</guid>
      <description>プログラミング言語別対応メモ # 社会人になってからは業務でJavaをバリバリ書いたり学んだりしていた私が、急にPythonをやる必要が出てきた</description>
    </item>
    
  </channel>
</rss>
